// Code generated by goyacc .\grammar.y. DO NOT EDIT.

//line .\grammar.y:1

package main

import __yyfmt__ "fmt"

//line .\grammar.y:3

//line .\grammar.y:11
type yySymType struct {
	yys   int
	token Token
	//terminal                   Token
	//terms                  Token
	stmt_if  statement // оператор Если
	stmts    statements
	stmt     statement
	compstmt statements
}

const Directive = 57346
const Identifier = 57347
const Procedure = 57348
const Var = 57349
const EndProcedure = 57350
const If = 57351
const Then = 57352
const ElseIf = 57353
const Else = 57354
const EndIf = 57355
const For = 57356
const Each = 57357
const In = 57358
const To = 57359
const Loop = 57360
const EndLoop = 57361
const Break = 57362
const Not = 57363
const Continue = 57364
const Try = 57365
const Catch = 57366
const EndTry = 57367
const Number = 57368
const String = 57369
const Array = 57370
const Function = 57371
const EndFunction = 57372
const Return = 57373
const Throw = 57374
const NeEq = 57375
const Or = 57376
const And = 57377
const True = 57378
const False = 57379
const Undefind = 57380
const Export = 57381

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"Directive",
	"Identifier",
	"Procedure",
	"Var",
	"EndProcedure",
	"If",
	"Then",
	"ElseIf",
	"Else",
	"EndIf",
	"For",
	"Each",
	"In",
	"To",
	"Loop",
	"EndLoop",
	"Break",
	"Not",
	"Continue",
	"Try",
	"Catch",
	"EndTry",
	"Number",
	"String",
	"Array",
	"Function",
	"EndFunction",
	"Return",
	"Throw",
	"NeEq",
	"Or",
	"And",
	"True",
	"False",
	"Undefind",
	"Export",
	"'='",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'('",
	"')'",
	"','",
	"'\\n'",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line .\grammar.y:151

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 40,
	30, 8,
	-2, 49,
	-1, 53,
	33, 0,
	-2, 41,
	-1, 59,
	8, 8,
	-2, 49,
	-1, 62,
	8, 10,
	11, 10,
	12, 10,
	13, 10,
	30, 10,
	-2, 50,
	-1, 91,
	11, 8,
	12, 8,
	13, 8,
	-2, 49,
	-1, 97,
	13, 8,
	-2, 49,
	-1, 101,
	11, 8,
	12, 8,
	13, 8,
	-2, 49,
}

const yyPrivate = 57344

const yyLast = 240

var yyAct = [...]int8{
	14, 43, 79, 60, 94, 69, 89, 44, 8, 65,
	24, 7, 39, 24, 83, 23, 24, 38, 27, 28,
	29, 41, 101, 37, 12, 11, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 8, 40,
	61, 67, 62, 63, 6, 33, 35, 34, 99, 97,
	95, 64, 32, 30, 31, 25, 26, 27, 28, 29,
	76, 62, 73, 66, 13, 42, 10, 5, 9, 73,
	64, 3, 88, 82, 78, 96, 84, 22, 74, 59,
	81, 86, 68, 4, 2, 1, 90, 25, 26, 27,
	28, 29, 0, 62, 0, 93, 98, 0, 0, 62,
	0, 100, 57, 62, 0, 102, 0, 103, 77, 0,
	80, 80, 0, 0, 0, 91, 0, 85, 0, 80,
	87, 33, 35, 34, 80, 0, 0, 92, 32, 30,
	31, 25, 26, 27, 28, 29, 0, 58, 33, 35,
	34, 0, 0, 0, 0, 32, 30, 31, 25, 26,
	27, 28, 29, 15, 0, 0, 0, 75, 30, 31,
	25, 26, 27, 28, 29, 0, 0, 0, 71, 0,
	72, 0, 0, 0, 18, 17, 0, 0, 0, 0,
	70, 0, 0, 0, 19, 20, 21, 0, 0, 15,
	33, 35, 34, 0, 0, 0, 16, 32, 30, 31,
	25, 26, 27, 28, 29, 33, 0, 34, 0, 0,
	18, 17, 0, 30, 31, 25, 26, 27, 28, 29,
	19, 20, 21, 0, 0, 33, 0, 0, 0, 0,
	0, 0, 16, 30, 31, 25, 26, 27, 28, 29,
}

var yyPact = [...]int16{
	67, -1000, 38, -43, -1000, 63, 61, -1000, -1000, -23,
	-24, 184, 184, -34, 157, -25, 184, -1000, -1000, -1000,
	-1000, -1000, -37, -18, -43, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 88, -18,
	-43, -1000, 184, -43, -1000, -27, -27, -1000, -1000, -1000,
	44, 44, 157, 117, 192, 172, 157, -40, -1000, -43,
	11, 148, -43, 157, -1000, -1000, 52, -43, 148, -43,
	-13, -1000, -1000, 157, -1000, 184, -43, -1000, -43, -43,
	-46, -1000, -1000, -43, 105, -1000, -43, -1000, -1000, -1000,
	-1000, -43, -1000, 39, 37, 184, 35, -43, 12, -1000,
	-1000, -43, 39, -1000,
}

var yyPgo = [...]int8{
	0, 5, 85, 84, 83, 7, 39, 64, 3, 40,
	82, 1, 2, 80, 0, 78, 4, 75, 72,
}

var yyR1 = [...]int8{
	0, 2, 3, 3, 6, 6, 4, 4, 8, 8,
	8, 10, 10, 1, 1, 1, 1, 1, 13, 13,
	15, 16, 16, 17, 17, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 7, 7, 7, 12, 9,
	9, 11, 11, 5, 18,
}

var yyR2 = [...]int8{
	0, 2, 0, 2, 0, 1, 9, 9, 0, 2,
	1, 3, 4, 2, 1, 1, 1, 1, 1, 2,
	7, 0, 5, 0, 2, 1, 3, 3, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 4, 0, 1, 4, 2, 0,
	1, 1, 2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -2, -3, 4, -4, 29, 6, -5, 51, 5,
	5, 48, 48, -7, -14, 5, 48, 27, 26, 36,
	37, 38, -7, 49, 50, 43, 44, 45, 46, 47,
	41, 42, 40, 33, 35, 34, 40, 48, -14, 49,
	-6, 39, -9, -11, -5, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -7, 49, -6,
	-8, -9, -11, -14, -5, 49, -8, 30, -10, -1,
	32, 20, 22, -14, -15, 9, 8, -9, -1, -12,
	-9, -13, -12, 27, -14, -9, -12, -9, -18, 52,
	-12, 10, -9, -8, -16, 11, -17, 12, -14, 13,
	-8, 10, -8, -16,
}

var yyDef = [...]int8{
	2, -2, 0, 0, 1, 0, 0, 3, 53, 0,
	0, 45, 45, 0, 46, 25, 0, 32, 33, 34,
	35, 36, 0, 4, 49, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 4,
	-2, 5, 0, 50, 51, 27, 28, 29, 30, 31,
	37, 38, 39, -2, 42, 43, 40, 0, 26, -2,
	0, 0, -2, 47, 52, 44, 0, 49, 9, 49,
	49, 14, 15, 16, 17, 0, 49, 6, 49, 49,
	0, 13, 18, 49, 0, 7, 49, 11, 48, 54,
	19, -2, 12, 21, 23, 0, 0, -2, 0, 20,
	24, -2, 21, 22,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	51, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 47, 3, 3,
	48, 49, 45, 43, 50, 44, 3, 46, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 52,
	42, 40, 41,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\grammar.y:38
		{
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\grammar.y:42
		{
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:46
		{
		}
	case 6:
		yyDollar = yyS[yypt-9 : yypt+1]
//line .\grammar.y:50
		{
		}
	case 7:
		yyDollar = yyS[yypt-9 : yypt+1]
//line .\grammar.y:51
		{
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\grammar.y:55
		{
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:56
		{
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:59
		{
		}
	case 12:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\grammar.y:60
		{
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\grammar.y:64
		{
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:65
		{
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:66
		{
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:67
		{
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:68
		{
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:71
		{
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\grammar.y:72
		{
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\grammar.y:78
		{

		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\grammar.y:85
		{
			// Обработка блока ElseIf
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\grammar.y:91
		{
			// Обработка блока Else
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:96
		{
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:97
		{
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:98
		{
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:99
		{
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:100
		{
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:101
		{
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:102
		{
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:103
		{
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:104
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:105
		{
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:106
		{
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:107
		{
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:108
		{
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:109
		{
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:110
		{
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:111
		{
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:112
		{
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:113
		{
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:114
		{
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\grammar.y:115
		{
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\grammar.y:118
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:119
		{
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\grammar.y:120
		{
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\grammar.y:138
		{
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:145
		{
		}
	}
	goto yystack /* stack new state and value */
}
