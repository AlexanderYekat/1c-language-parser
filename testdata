Процедура ЗагрузитьОбъекты(Задание, Отказ = Ложь) Экспорт

	//Перем ПараметрыГруппировок; // соответствие. содержит параметры группировок, по каждой группе заголовков файла
	Перем РеквизитыСтруктурыВРасшифровке; // соответствие. содержит имена параметров макета и соответствующи им имена полей
	Перем СоответствиеРеквизитовШапки;
	Перем ПроцедурыОбработкиСтрок;
	Перем СостояниеПлатежноРасчетныхДокументов;
	//Перем СоответствиеРеквизитовГруппировок;

	Организация            = Задание.Организация;
	КассовыйОрган 	       = Задание.КассовыйОрган;
	ВидОбмена       	   = Задание.ВидОбмена;

	Если ТипЗнч(Задание) = Тип("ДокументСсылка.ЗаданиеНаИмпортДанныхБанкиКС") Тогда
		 Задание = Задание.ПолучитьОбъект();
	КонецЕсли;

	// сохраним организацию во временное хранилище, чтобы потом использовать ее при вызове функций при вычислении полей СКД
	ПоместитьВоВременноеХранилище(Организация, БиблиотекаФункцийОбменаПовтИсп.ПолучитьОбъектВоВременномХранилище());

	Для каждого ФайлОбъекта из Задание.ФайлыОбмена цикл
		ФайлОбъекта.Описание = "";
		ФайлОбъекта.ОписаниеОшибки = "";
	КонецЦикла;

	Задание.ОбъектыОбмена.Очистить();

	Запрос = Новый Запрос(ТекстЗапросаЗадание());
	Запрос.УстановитьПараметр("Ссылка",Задание.Ссылка);
	Запрос.УстановитьПараметр("Организация",Задание.Организация);
	МассивРезультатов = Запрос.ВыполнитьПакет();

	ОписаниеОбъектаОшибки = Новый ТаблицаЗначений;
	ОписаниеОбъектаОшибки.Колонки.Добавить("ПолеФайла", , "Поле файла передачи");
	ОписаниеОбъектаОшибки.Колонки.Добавить("Ошибка",    , "Ошибка заполнения поля файла передачи");

	ФайлыОбмена = МассивРезультатов[1].Выгрузить();

	// создадим таблицу для поиска соответствий между файлом и его расшифровкой
	СоответствияФайлов = Новый ТаблицаЗначений;
	СоответствияФайлов.Колонки.Добавить("ОсновнойФайл", 				Новый ОписаниеТипов("Строка"));
	СоответствияФайлов.Колонки.Добавить("ТекстОсновногоФайла", 			Новый ОписаниеТипов("Строка"));
	СоответствияФайлов.Колонки.Добавить("НомерСтрокиОсновногоФайла", 	Новый ОписаниеТипов("Число"));
	СоответствияФайлов.Колонки.Добавить("ФорматОсновногоФайла", 		Новый ОписаниеТипов("СправочникСсылка.ФорматыОбменаБанкиКС"));
	СоответствияФайлов.Колонки.Добавить("ИмяОсновногоФайла", 			Новый ОписаниеТипов("Строка"));
	СоответствияФайлов.Колонки.Добавить("ФайлСтруктура", 				Новый ОписаниеТипов("Строка"));
	СоответствияФайлов.Колонки.Добавить("ТекстФайлаСтруктура", 			Новый ОписаниеТипов("Строка"));
	СоответствияФайлов.Колонки.Добавить("НомерСтрокиФайлаСтруктура",	Новый ОписаниеТипов("Число"));
	СоответствияФайлов.Колонки.Добавить("ФорматФайлаСтруктура", 		Новый ОписаниеТипов("СправочникСсылка.ФорматыОбменаБанкиКС"));
	СоответствияФайлов.Колонки.Добавить("ФайлСтруктура_ВО", 			Новый ОписаниеТипов("Строка"));
	СоответствияФайлов.Колонки.Добавить("ТекстФайлаСтруктура_ВО",		Новый ОписаниеТипов("Строка"));
	СоответствияФайлов.Колонки.Добавить("НомерСтрокиФайлаСтруктура_ВО",	Новый ОписаниеТипов("Число"));
	СоответствияФайлов.Колонки.Добавить("ФорматФайлаСтруктура_ВО", 		Новый ОписаниеТипов("СправочникСсылка.ФорматыОбменаБанкиКС"));

	//ФК-БС
	СоответствияФайлов.Колонки.Добавить("ФайлСтруктура_ВС", 			Новый ОписаниеТипов("Строка"));
	СоответствияФайлов.Колонки.Добавить("ТекстФайлаСтруктура_ВС",		Новый ОписаниеТипов("Строка"));
	СоответствияФайлов.Колонки.Добавить("НомерСтрокиФайлаСтруктура_ВС",	Новый ОписаниеТипов("Число"));
	СоответствияФайлов.Колонки.Добавить("ФорматФайлаСтруктура_ВС", 		Новый ОписаниеТипов("СправочникСсылка.ФорматыОбменаБанкиКС"));

	ФайлыРасшифровки = Новый ТаблицаЗначений;
	ФайлыРасшифровки.Колонки.Добавить("ИмяФайла", 				        Новый ОписаниеТипов("Строка"));
	ФайлыРасшифровки.Колонки.Добавить("ТекстФайла", 				    Новый ОписаниеТипов("Строка"));
	ФайлыРасшифровки.Колонки.Добавить("НомерСтроки",                 	Новый ОписаниеТипов("Число"));
	ФайлыРасшифровки.Колонки.Добавить("ФорматФайла", 		            Новый ОписаниеТипов("СправочникСсылка.ФорматыОбменаБанкиКС"));

	//НачатьТранзакцию();
	//Попытка

	Для Каждого СтрокаДокумента Из ФайлыОбмена Цикл

		ОписаниеОбъектаОшибки.Очистить();

		Если ЗначениеЗаполнено(СтрокаДокумента.ИмяФайла)
			И НЕ(ВидОбмена.ПредставлениеВНомереВерсии = "KB")
			И НЕ(ВидОбмена.ПредставлениеВНомереВерсии = "RFI")
			И НЕ(ВидОбмена.ПредставлениеВНомереВерсии = "UNIFO")
			И НЕ(ВидОбмена.ПредставлениеВНомереВерсии = "GY")
			И ((ВидОбмена.ПредставлениеВНомереВерсии  = "TX") И (Год(СтрокаДокумента.Регистратор.Дата) = Год(Задание.Дата)))Тогда
			// для обмена с ОФК уникальность имени файла поддерживается в пределах года

			СтрокаОписания = ОписаниеОбъектаОшибки.Добавить();
			СтрокаОписания.ПолеФайла = НСтр("ru='Файл был загружен ранее'"); //СтрокаВСхеме.ПолеФайла;
			СтрокаОписания.Ошибка    = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
																	НСтр("ru='Объекты, описанные в этом файле были загружены ранее документом: [Документ]'"),
																	Новый Структура("Документ", Строка(СтрокаДокумента.Регистратор)));;
			ВставитьОшибкуВДокумент(Задание, ЗначениеВСтрокуВнутр(ОписаниеОбъектаОшибки), СтрокаДокумента.НомерСтроки);

			Продолжить;

		КонецЕсли;

		ИмяФайлаБезРасширения = "";
		ТекстФайла  = СодержимоеФайла(Задание.Ссылка, СтрокаДокумента.ИмяФайлаЗагрузки, ВидОбмена, ИмяФайлаБезРасширения);
		Если НРег(Прав(СтрокаДокумента.ИмяФайлаЗагрузки, 3)) = "xml" Тогда
			//Оставляем имя как есть
		Иначе
			//ИмяФайлаБезРасширения = ИмяФайлаБезРасширения+".**"+Прав(СтрокаДокумента.ИмяФайлаЗагрузки, 1);
			ИмяФайлаБезРасширения = Сред(ИмяФайлаБезРасширения,1,СтрДлина(ИмяФайлаБезРасширения)-2);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекстФайла) Тогда
			СтрокаДокумента.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(	НСтр("ru='Не удалось прочитать файл [ИмяФайлаЗагрузки]'"),
																									Новый Структура("ИмяФайлаЗагрузки", СтрокаДокумента.ИмяФайлаЗагрузки));
			Продолжить;
		КонецЕсли;

		СтрокаФайла = СоответствияФайлов.Найти(ИмяФайлаБезРасширения, "ИмяОсновногоФайла");
		Если СтрокаФайла = Неопределено Тогда
			СтрокаФайла = СоответствияФайлов.Добавить();
			СтрокаФайла.ИмяОсновногоФайла = ИмяФайлаБезРасширения;
		КонецЕсли;

		Если СтрокаДокумента.ТипОбъекта = "Структура" Тогда

			НовыйФайлРасшифровки             = ФайлыРасшифровки.Добавить();
			НовыйФайлРасшифровки.ИмяФайла    = СтрокаДокумента.ИмяФайлаЗагрузки;
			НовыйФайлРасшифровки.ТекстФайла  = ТекстФайла;
			НовыйФайлРасшифровки.НомерСтроки = СтрокаДокумента.НомерСтроки;
			НовыйФайлРасшифровки.ФорматФайла = СтрокаДокумента.Формат;

			Для Каждого СтрокаТЧ Из СоответствияФайлов Цикл

				//ФК-БС
				Постфикс = "";
				Если СтрНайти(СтрокаДокумента.Формат, "BH") > 0 Тогда
					Постфикс = "_ВО";
				ИначеЕсли СтрНайти(СтрокаДокумента.Формат, "SP") > 0 Тогда
	                Постфикс = "_ВС";
				КонецЕсли;

				Постфикс = ?(Найти(СтрокаДокумента.Формат, "BH") > 0, "_ВО", "");

				Если НЕ ЗначениеЗаполнено(СтрокаТЧ["ФайлСтруктура" + Постфикс]) Тогда

					СтрокаТЧ["ФайлСтруктура"            + Постфикс] = СтрокаДокумента.ИмяФайлаЗагрузки;
					СтрокаТЧ["ТекстФайлаСтруктура"      + Постфикс] = ТекстФайла;
					СтрокаТЧ["НомерСтрокиФайлаСтруктура"+ Постфикс]	= СтрокаДокумента.НомерСтроки;
					СтрокаТЧ["ФорматФайлаСтруктура"     + Постфикс] = СтрокаДокумента.Формат;

				КонецЕсли;

			КонецЦикла;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаФайла.ОсновнойФайл) Тогда
				СтрокаФайла.ОсновнойФайл 				= СтрокаДокумента.ИмяФайлаЗагрузки;
				СтрокаФайла.ТекстОсновногоФайла 		= ТекстФайла;
				СтрокаФайла.НомерСтрокиОсновногоФайла 	= СтрокаДокумента.НомерСтроки;
				СтрокаФайла.ФорматОсновногоФайла 		= СтрокаДокумента.Формат;
			Иначе
				НовСтрокаФайла = СоответствияФайлов.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаФайла,СтрокаФайла);
				НовСтрокаФайла.ОсновнойФайл 			= СтрокаДокумента.ИмяФайлаЗагрузки;
				НовСтрокаФайла.ТекстОсновногоФайла 		= ТекстФайла;
				НовСтрокаФайла.НомерСтрокиОсновногоФайла= СтрокаДокумента.НомерСтроки;
				НовСтрокаФайла.ФорматОсновногоФайла 	= СтрокаДокумента.Формат;
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;


	Для Каждого ПараФайлов Из СоответствияФайлов Цикл

		Если ВидОбмена.ПредставлениеВНомереВерсии = "TX" Тогда
			МаркерОсновногоФайла = Сред(ПараФайлов.ОсновнойФайл, Найти(ПараФайлов.ОсновнойФайл, ".") + 1, 2);
		    GUIDФайлаРасшифровки = Сред(ПараФайлов.ТекстОсновногоФайла, Найти(ПараФайлов.ТекстОсновногоФайла, МаркерОсновногоФайла + "|") + 3, 36);

			Для каждого ВспомогательныйФайл Из ФайлыРасшифровки Цикл

				//ФК-БС
				Постфикс = "";
				Если СтрНайти(ВспомогательныйФайл.ФорматФайла, "BH") > 0 Тогда
					Постфикс = "_ВО";
				ИначеЕсли СтрНайти(ВспомогательныйФайл.ФорматФайла, "SP") > 0 Тогда
	                Постфикс = "_ВС";
				КонецЕсли;

				//Постфикс = ?(Найти(ВспомогательныйФайл.ФорматФайла, "BH") > 0, "_ВО", "");

				Если Найти(ВспомогательныйФайл.ТекстФайла, GUIDФайлаРасшифровки) > 0 Тогда

					 ПараФайлов["ФайлСтруктура"            + Постфикс]    = ВспомогательныйФайл.ИмяФайла;
					 ПараФайлов["ТекстФайлаСтруктура"      + Постфикс]    = ВспомогательныйФайл.ТекстФайла;
					 ПараФайлов["НомерСтрокиФайлаСтруктура"+ Постфикс]    = ВспомогательныйФайл.НомерСтроки;
	                 ПараФайлов["ФорматФайлаСтруктура"     + Постфикс]    = ВспомогательныйФайл.ФорматФайла;

					 //Прервать;

				КонецЕсли;

			КонецЦикла;
		КонецЕсли;


		Если НЕ ЗначениеЗаполнено(ПараФайлов.ОсновнойФайл) Тогда
			Если ПараФайлов.ФорматФайлаСтруктура.Владелец.ТипФайлаПередачи=Перечисления.ТипыФайловПередачиДляОбмена.XML Тогда
				// считаем что это формат УНИФО
				ТекстОшибкиУНИФО = "";
				ЗагрузитьИзФайлаXML(ПараФайлов.ТекстФайлаСтруктура, ПараФайлов.ФорматФайлаСтруктура, Задание,ПараФайлов.НомерСтрокиФайлаСтруктура,ПараФайлов.ФайлСтруктура,,,,,ОписаниеОбъектаОшибки, ТекстОшибкиУНИФО);
				Если Не ПустаяСтрока(ТекстОшибкиУНИФО) Тогда
					СтрокаОписания = ОписаниеОбъектаОшибки.Добавить();
					СтрокаОписания.ПолеФайла = ТекстОшибкиУНИФО;
					СтрокаОписания.Ошибка    = ТекстОшибкиУНИФО;
					ВставитьОшибкуВДокумент(Задание, ЗначениеВСтрокуВнутр(ОписаниеОбъектаОшибки), ПараФайлов.НомерСтрокиФайлаСтруктура);
				КонецЕсли;
                Продолжить;
			Иначе
				СтрокаОписания = ОписаниеОбъектаОшибки.Добавить();
				СтрокаОписания.ПолеФайла = НСтр("ru='Для файла структуры не найден основной файл'");
				СтрокаОписания.Ошибка    = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(	НСтр("ru='Для файла структуры [ИмяФайла] не найден основной файл'"),
																									Новый Структура("ИмяФайла", ПараФайлов.ФайлСтруктура));
				ВставитьОшибкуВДокумент(Задание, ЗначениеВСтрокуВнутр(ОписаниеОбъектаОшибки), ПараФайлов.НомерСтрокиФайлаСтруктура);
				Продолжить;
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(ПараФайлов.ФайлСтруктура) Тогда
			Если ПараФайлов.ФорматОсновногоФайла.Владелец.ТипФайлаПередачи=Перечисления.ТипыФайловПередачиДляОбмена.XML Тогда
				// считаем что это формат УНИФО

				ТекстОшибкиУНИФО = "";
				ЗагрузитьИзФайлаXML(ПараФайлов.ТекстОсновногоФайла, ПараФайлов.ФорматОсновногоФайла, Задание,ПараФайлов.НомерСтрокиОсновногоФайла,ПараФайлов.ОсновнойФайл,,,,,ОписаниеОбъектаОшибки, ТекстОшибкиУНИФО);
				Если Не ПустаяСтрока(ТекстОшибкиУНИФО) Тогда
					СтрокаОписания = ОписаниеОбъектаОшибки.Добавить();
					СтрокаОписания.ПолеФайла = ТекстОшибкиУНИФО;
					СтрокаОписания.Ошибка    = ТекстОшибкиУНИФО;
					ВставитьОшибкуВДокумент(Задание, ЗначениеВСтрокуВнутр(ОписаниеОбъектаОшибки), ПараФайлов.НомерСтрокиОсновногоФайла);
				КонецЕсли;
                Продолжить;
			Иначе
				Если Лев(ПараФайлов.ТекстОсновногоФайла, 20) = "1CClientBankExchange" Тогда
					ЗагрузитьИзТекстовогоФайла(ПараФайлов.ТекстОсновногоФайла, ПараФайлов.ФорматОсновногоФайла, Задание,ПараФайлов.ОсновнойФайл);
					Продолжить;
				КонецЕсли;
			//Иначе
			//	СтрокаОписания = ОписаниеОбъектаОшибки.Добавить();
			//	СтрокаОписания.ПолеФайла = НСтр("ru='Для основного файла не найден файл структуры'");
			//	СтрокаОписания.Ошибка    = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(	НСтр("ru='Для основного файла [ИмяФайла] не найден файл структуры'"),
			//																						Новый Структура("ИмяФайла", ПараФайлов.ОсновнойФайл));
			//	ВставитьОшибкуВДокумент(Задание, ЗначениеВСтрокуВнутр(ОписаниеОбъектаОшибки), ПараФайлов.НомерСтрокиОсновногоФайла);
			//	Продолжить;
			КонецЕсли;
		КонецЕсли;

		ИдентификаторДокумента = Сред(ПараФайлов.ФорматОсновногоФайла.Наименование, 3, 2);

		ДанныеДляИсточника = Новый Структура;
		ДанныеДляИсточника.Вставить("ФорматОсновногоФайла", 	ПараФайлов.ФорматОсновногоФайла);
		ДанныеДляИсточника.Вставить("ФорматФайлаСтруктура", 	ПараФайлов.ФорматФайлаСтруктура);
		ДанныеДляИсточника.Вставить("ФорматФайлаСтруктура_ВО", 	ПараФайлов.ФорматФайлаСтруктура_ВО);
		ДанныеДляИсточника.Вставить("ФорматФайлаСтруктура_ВС", 	ПараФайлов.ФорматФайлаСтруктура_ВС);
		ДанныеДляИсточника.Вставить("ТекстОсновногоФайла", 		ПараФайлов.ТекстОсновногоФайла);
		ДанныеДляИсточника.Вставить("ТекстФайлаСтруктура", 		ПараФайлов.ТекстФайлаСтруктура);
		ДанныеДляИсточника.Вставить("ТекстФайлаСтруктура_ВО", 	ПараФайлов.ТекстФайлаСтруктура_ВО);
		ДанныеДляИсточника.Вставить("ТекстФайлаСтруктура_ВС", 	ПараФайлов.ТекстФайлаСтруктура_ВС);

		ИсточникиДанных = СоздатьИсточникиДанныхИзТекстов(	ИдентификаторДокумента,
															ПараФайлов.НомерСтрокиОсновногоФайла - 1,
															ДанныеДляИсточника);

		СоответствиеРеквизитовГруппировок = Неопределено;
		ПроцедурыОбработкиСтрок           = Новый Соответствие;
		СписокУсловий                     = Новый СписокЗначений;
		ПараметрыГруппировок              = Новый Соответствие;

		СхемаКомпоновки = СоздатьСКДПоПравиламОбмена(		ДанныеДляИсточника,
															ИсточникиДанных,
															ПараметрыГруппировок,
															СоответствиеРеквизитовШапки,
															РеквизитыСтруктурыВРасшифровке,
															СоответствиеРеквизитовГруппировок,
															ПроцедурыОбработкиСтрок,
															СписокУсловий,
															ПараФайлов.НомерСтрокиОсновногоФайла);




		// зададим параметры схемы компоновки
		// считаем что кассовый орган есть во всех схемах
		Для каждого ПараметрКомпоновки Из СхемаКомпоновки.Параметры Цикл

			Если Лев(ВРЕГ(ПараметрКомпоновки.Имя), 13) = "КАССОВЫЙОРГАН" Тогда

				СоставПараметра = СтрРазделить(ПараметрКомпоновки.Заголовок, ".");
				Если СоставПараметра.Количество() = 1 Тогда
					// кассовый орган
					ПараметрКомпоновки.Значение = Задание.КассовыйОрган;
				Иначе

					СтрокаРеквизитов = "";
					Для Счетчик=1 По СоставПараметра.ВГраница() Цикл

						СтрокаРеквизитов = "." + СоставПараметра[Счетчик];

					КонецЦикла;
					СтрокаРеквизитов = Сред(СтрокаРеквизитов, 2);
					ПараметрКомпоновки.Значение = БухгалтерскиеОперацииСервер.ЗначениеРеквизита(Задание.КассовыйОрган, СтрокаРеквизитов);
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		ПараметрКассовыйОрган = СхемаКомпоновки.Параметры.Найти("КассовыйОрган");
		Если ПараметрКассовыйОрган <> Неопределено Тогда
			ПараметрКассовыйОрган.Значение = Задание.КассовыйОрган;
		КонецЕсли;
		ИспользуемыеНастройки = СхемаКомпоновки.НастройкиПоУмолчанию;

		// удалим из структуры схема компоновки те группировки, по которым нет данных в источниках данных
		//УдаляемыеГруппировки=Новый Массив;
		Для Каждого ИсточникДанных Из ИсточникиДанных Цикл

			// секция "ИдентификаторДокумента" должна быть в любом случае, ее нельзя удалять
			// секции расшифровки удалять не нужно, т.к. они удаляются вместе с их родительскими группировками
			//Если ИсточникДанных.Ключ = ИдентификаторДокумента ИЛИ ИсточникДанных.Ключ = "BD" Тогда
			//Прайд
			Если ИсточникДанных.Ключ = ИдентификаторДокумента ИЛИ ИсточникДанных.Ключ = "BH" ИЛИ ИсточникДанных.Ключ = "BD" Тогда
			//
				Продолжить;
			КонецЕсли;

			Если ИсточникДанных.Значение.Количество()=0 Тогда // в таблице значений 0 строк

				ИндексГруппировки = -1;
				Для каждого ТекГруппировка Из ИспользуемыеНастройки.Структура[0].Структура Цикл

					Если ТекГруппировка.Имя	= ИсточникДанных.Ключ Тогда
						ИндексГруппировки = ИспользуемыеНастройки.Структура[0].Структура.Индекс(ТекГруппировка);
						Прервать;
					КонецЕсли;

				КонецЦикла;
				Если ИндексГруппировки <> -1 Тогда
					ИспользуемыеНастройки.Структура[0].Структура.Удалить(ИндексГруппировки);
					Если СоответствиеРеквизитовГруппировок.Получить(ИсточникДанных.Ключ) <> Неопределено Тогда
						СоответствиеРеквизитовГруппировок.Удалить(ИсточникДанных.Ключ);
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		КомпоновщикМакета      = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки        = КомпоновщикМакета.Выполнить(СхемаКомпоновки, ИспользуемыеНастройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		ПроцессорКомпоновки    = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ИсточникиДанных,,Истина);
		ПроцессорВывода        = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(Новый ДеревоЗначений);
		РезультатВывода        = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);

		Для Каждого СтрокаВывода Из РезультатВывода.Строки Цикл

			Если Метаданные.Документы[Парафайлов.ФорматОсновногоФайла.ИдентификаторОбъекта.Имя].Реквизиты.Найти("ЛицевойСчет") = Неопределено Тогда

			ИначеЕсли РезультатВывода.Колонки.Найти("ЛицевойСчет") = Неопределено и РезультатВывода.Колонки.Найти("ОбъектЛицевойСчет") = Неопределено Тогда
				СтрокаОписания           = ОписаниеОбъектаОшибки.Добавить();
				СтрокаОписания.ПолеФайла = НСтр("ru='В файле не задана настройка лицевого счета'");
				СтрокаОписания.Ошибка    = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(	НСтр("ru='В формате [ИмяФормата] не задана настройка заполнения лицевого счета документа'"),
																									Новый Структура("ИмяФормата", ПараФайлов.ФорматОсновногоФайла.Наименование));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОписания.Ошибка,ПараФайлов.ФорматОсновногоФайла);
				ВставитьОшибкуВДокумент(Задание, ЗначениеВСтрокуВнутр(ОписаниеОбъектаОшибки), ПараФайлов.НомерСтрокиОсновногоФайла);
				Продолжить;
			ИначеЕсли РезультатВывода.Колонки.Найти("ЛицевойСчет") <> Неопределено И НЕ ЗначениеЗаполнено(СтрокаВывода["ЛицевойСчет"]) Тогда
				СтрокаОписания = ОписаниеОбъектаОшибки.Добавить();
				СтрокаОписания.ПолеФайла = НСтр("ru='Не найден лицевой счет'");
				СтрокаОписания.Ошибка    = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(	НСтр("ru='Не найден лицевой счет №[ЛицевойСчет], указанный в файле [ИмяФайла]'"),
																									Новый Структура("ЛицевойСчет, ИмяФайла",
																													СтрокаВывода["НомерЛицевогоСчетаФайла"],
																													ПараФайлов.ОсновнойФайл));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОписания.Ошибка,,"ФайлыОбмена["+ПараФайлов.НомерСтрокиОсновногоФайла+"].ИмяФайлаЗагрузки");
				ВставитьОшибкуВДокумент(Задание, ЗначениеВСтрокуВнутр(ОписаниеОбъектаОшибки), ПараФайлов.НомерСтрокиОсновногоФайла);
				Продолжить;
			ИначеЕсли РезультатВывода.Колонки.Найти("ОбъектЛицевойСчет") <> Неопределено И НЕ ЗначениеЗаполнено(СтрокаВывода["ОбъектЛицевойСчет"]) Тогда
				СтрокаОписания = ОписаниеОбъектаОшибки.Добавить();
				СтрокаОписания.ПолеФайла = НСтр("ru='Не найден лицевой счет'");
				СтрокаОписания.Ошибка    = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(	НСтр("ru='Не найден лицевой счет №[ЛицевойСчет], указанный в файле [ИмяФайла]'"),
																									Новый Структура("ЛицевойСчет, ИмяФайла",
																													СтрокаВывода["НомерЛицевогоСчетаФайла"],
																													ПараФайлов.ОсновнойФайл));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОписания.Ошибка,,"ФайлыОбмена["+ПараФайлов.НомерСтрокиОсновногоФайла+"].ИмяФайлаЗагрузки");
				ВставитьОшибкуВДокумент(Задание, ЗначениеВСтрокуВнутр(ОписаниеОбъектаОшибки), ПараФайлов.НомерСтрокиОсновногоФайла);
				Продолжить;
			КонецЕсли;

			Для каждого ТекУсловие Из СписокУсловий Цикл

				Если ЗначениеЗаполнено(СтрокаВывода[ТекУсловие.Значение]) Тогда
					СтрокаОписания = ОписаниеОбъектаОшибки.Добавить();
					СтрокаОписания.ПолеФайла = СтрокаВывода[ТекУсловие.Значение];
					СтрокаОписания.Ошибка    = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(	НСтр("ru='Ошибка в файле [ИмяФайла]. Загрузка прекращена по причине: [ОписаниеОшибки]'"),
																										Новый Структура("ОписаниеОшибки, ИмяФайла",
																														СтрокаВывода[ТекУсловие.Значение],
																														ПараФайлов.ОсновнойФайл));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОписания.Ошибка,,,,Отказ);
					ВставитьОшибкуВДокумент(Задание, ЗначениеВСтрокуВнутр(ОписаниеОбъектаОшибки), ПараФайлов.НомерСтрокиОсновногоФайла);
					Продолжить;
				КонецЕсли;

			КонецЦикла;
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;

			РеквизитыШапкиОбъекта = Новый Структура;
			СтрокаРеквизитовШапки = "";
			Для Каждого ТекРеквизитШапки Из СоответствиеРеквизитовШапки Цикл
				Если ТипЗнч(ТекРеквизитШапки.Значение) = Тип("Структура")
					ИЛИ ТипЗнч(ТекРеквизитШапки.Значение) = Тип("Соответствие") Тогда
					РеквизитыШапкиОбъекта.Вставить(ТекРеквизитШапки.Ключ, Новый Структура);
					Для каждого ТекЗначениеСтруктуры Из ТекРеквизитШапки.Значение Цикл

						РеквизитыШапкиОбъекта[ТекРеквизитШапки.Ключ].Вставить(ТекЗначениеСтруктуры.Ключ, СтрокаВывода[ТекРеквизитШапки.Ключ+ТекЗначениеСтруктуры.Ключ]);

					КонецЦикла;

				ИначеЕсли ТипЗнч(ТекРеквизитШапки.Значение) <> Тип("Соответствие") Тогда
					РеквизитыШапкиОбъекта.Вставить(ТекРеквизитШапки.Ключ, СтрокаВывода[ТекРеквизитШапки.Ключ]);
					СтрокаРеквизитовШапки = СтрокаРеквизитовШапки + "," + ТекРеквизитШапки.Значение;
				КонецЕсли;
			КонецЦикла;
			СтрокаРеквизитовШапки = Сред(СтрокаРеквизитовШапки, 2);


			Если ПараФайлов.ФорматОсновногоФайла.ИдентификаторОбъекта.Имя = "БюджетныеДанные" Тогда

				НомерПервичногоДокумента = Неопределено;
				ДатаПервичногоДокумента = Неопределено;
				РеквизитыШапкиОбъекта.Свойство("НомерПервичногоДокумента", НомерПервичногоДокумента);
				РеквизитыШапкиОбъекта.Свойство("ДатаПервичногоДокумента", ДатаПервичногоДокумента);
				ОбъектСсылка = ПолучитьСсылкуНаОбъект("Документ.БюджетныеДанные", Новый Структура(	"НомерПервичногоДокумента, ДатаПервичногоДокумента",
																									НомерПервичногоДокумента,
																									ДатаПервичногоДокумента));

			ИначеЕсли ПараФайлов.ФорматОсновногоФайла.ИдентификаторОбъекта.Имя = "ЗаявлениеНаВыдачуКазначейскогоАккредитива" Тогда

				НомерБО01  = Неопределено;
				КПС01Код   = Неопределено;
				КодФАИП01  = Неопределено;

				РеквизитыШапкиОбъекта.Свойство("НомерБО01",  НомерБО01);
				РеквизитыШапкиОбъекта.ПроизвольныеПараметры.Свойство("КПС01Код",  КПС01Код);
				РеквизитыШапкиОбъекта.Свойство("КодФАИП01", КодФАИП01);

				ОбъектСсылка = ПолучитьСсылкуНаОбъект("Документ.ЗаявлениеНаВыдачуКазначейскогоАккредитива", Новый Структура("НомерБО01, КПС01pointКод, КодФАИП01",
																									              НомерБО01,
																									              КПС01Код,
																									              КодФАИП01));


			ИначеЕсли РеквизитыШапкиОбъекта.Свойство("СостояниеПлатежноРасчетныхДокументов")
				И РеквизитыШапкиОбъекта.СостояниеПлатежноРасчетныхДокументов.Свойство("GUIDКО") Тогда
				ОбъектСсылка = БиблиотекаФункцийОбмена.НайтиДокументПоGUID(ПараФайлов.ФорматОсновногоФайла.ИдентификаторОбъекта.Имя,РеквизитыШапкиОбъекта.СостояниеПлатежноРасчетныхДокументов.GUIDКО);

			Иначе
				ОбъектСсылка = Неопределено;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОбъектСсылка) тогда
				Объект             = ОбъектСсылка.ПолучитьОбъект();
				ОчиститьТабличныеЧасти(Объект);

				Объект.Организация = Задание.Организация;
				Объект.Дата        = ТекущаяДатаСеанса();
			Иначе
				Объект             = Документы[ПараФайлов.ФорматОсновногоФайла.ИдентификаторОбъекта.Имя].СоздатьДокумент();
				Объект.Организация = Задание.Организация;
				Объект.Дата        = ТекущаяДатаСеанса();
			КонецЕсли;

			Если НЕ РеквизитыШапкиОбъекта.Свойство("СостояниеПлатежноРасчетныхДокументов", СостояниеПлатежноРасчетныхДокументов) Тогда
				СостояниеПлатежноРасчетныхДокументов = Новый Структура;
			КонецЕсли;

			Если НЕ (ПараФайлов.ФорматОсновногоФайла.ИдентификаторОбъекта.Имя = "ЗаявлениеНаВыдачуКазначейскогоАккредитива" И Не Объект.ЭтоНовый()) Тогда
				ЗаполнитьЗначенияСвойств(Объект, РеквизитыШапкиОбъекта, СтрокаРеквизитовШапки);
			КонецЕсли;

			Если ПараФайлов.ФорматОсновногоФайла.ИдентификаторОбъекта.Имя = "БюджетныеДанные" Тогда

				СтруктураКонтрагент = Новый Структура("КодПоРПБС, Наименование", "", "");

				Если РезультатВывода.Колонки.Найти("СтруктураКонтрагентКодПоРПБС") <> Неопределено Тогда
					СтруктураКонтрагент.КодПоРПБС = СтрокаВывода[РезультатВывода.Колонки.Найти("СтруктураКонтрагентКодПоРПБС").Имя];
				КонецЕсли;

				Если РезультатВывода.Колонки.Найти("СтруктураКонтрагентНаименование") <> Неопределено Тогда
					СтруктураКонтрагент.Наименование = СтрокаВывода[РезультатВывода.Колонки.Найти("СтруктураКонтрагентНаименование").Имя];
				КонецЕсли;

				Объект.ОтКого = БиблиотекаФункцийОбмена.КонтрагентПоРеквизиту("КодПоРПБС", СтруктураКонтрагент.КодПоРПБС);

				Если НЕ ЗначениеЗаполнено(Объект.ОтКого) И ЗначениеЗаполнено(СтруктураКонтрагент.Наименование) Тогда

					ДлинаНаименования           = Метаданные.Справочники.Контрагенты.ДлинаНаименования;
					//НаименованиеДляПоиска       = ?(СтрДлина(СтруктураКонтрагент.Наименование) <= ДлинаНаименования, СтруктураКонтрагент.Наименование, Лев(СтруктураКонтрагент.Наименование, ДлинаНаименования));
					ПредполагаемыйКонтрагент    = Справочники.Контрагенты.НайтиПоНаименованию(НаименованиеДляПоиска);

					Если ЗначениеЗаполнено(ПредполагаемыйКонтрагент) Тогда
						Объект.ОтКого = ПредполагаемыйКонтрагент;
                    Иначе
					    Объект.ОтКого = БиблиотекаФункцийОбмена.СоздатьКонтрагентаПоОписанию(СтруктураКонтрагент);
					КонецЕсли;

				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(Объект.ОтКого) Тогда
					СтруктураНовыйППП = Новый Структура("Наименование, НаименованиеКлассификатора, Код");
					Если РезультатВывода.Колонки.Найти("СтруктураНовыйПППНаименование")<>Неопределено Тогда
						СтруктураНовыйППП.НаименованиеКлассификатора = СтрокаВывода[РезультатВывода.Колонки.Найти("СтруктураНовыйПППНаименование").Имя];
					КонецЕсли;
					Если РезультатВывода.Колонки.Найти("СтруктураНовыйПППНаименованиеКлассификатора")<>Неопределено Тогда
						СтруктураНовыйППП.НаименованиеКлассификатора = СтрокаВывода[РезультатВывода.Колонки.Найти("СтруктураНовыйПППНаименованиеКлассификатора").Имя];
					КонецЕсли;
					Если РезультатВывода.Колонки.Найти("СтруктураНовыйПППКод")<>Неопределено Тогда
						СтруктураНовыйППП.Код = СтрокаВывода[РезультатВывода.Колонки.Найти("СтруктураНовыйПППКод").Имя];
					КонецЕсли;

					Объект.ОтКого = БиблиотекаФункцийОбмена.ЗначениеКлассификатораПоКоду(СтруктураНовыйППП.Код, "ГлавыПоБюджетнойКлассификации");

					Если НЕ ЗначениеЗаполнено(Объект.ОтКого) Тогда
						Объект.ОтКого = БиблиотекаФункцийОбмена.СоздатьНовоеЗначениеКлассификатора(СтруктураНовыйППП);
					КонецЕсли;

				КонецЕсли;

			ИначеЕсли ПараФайлов.ФорматОсновногоФайла.ИдентификаторОбъекта.Имя = "ЗаявлениеНаВыдачуКазначейскогоАккредитива" Тогда

				Если НЕ Объект.ЭтоНовый() Тогда

					ЗаполнитьЗначенияСвойств(Объект, РеквизитыШапкиОбъекта, "НомерАккредитива, ДатаАккредитива, СуммаАккредитива, СрокДействияАккредитива");

				Иначе //новый обыект

					Объект.Контрагент      = БиблиотекаФункцийОбмена.ОпределитьКонтрагента(Объект.ПолучательИНН, Объект.ПолучательКПП, Объект.ПолучательНаименование, "", Истина, Объект.ПлательщикКодРПБС);
				    Объект.СчетКонтрагента = БиблиотекаФункцийОбмена.ОпределитьСчетКонтрагента(Объект.Контрагент, Объект.ПолучательНомерЛС, Объект.ПолучательБИКБанка, "", "", Истина);
					Объект.Договор01       = БиблиотекаФункцийОбмена.ОпределитьДоговор(Объект.Организация, Объект.Контрагент, Объект.СчетКонтрагента, Объект.Номер01, Объект.Дата01);

				КонецЕсли;

			КонецЕсли;

			Если Объект.ЭтоНовый() Тогда
				Объект.Записать();
				СостояниеПлатежноРасчетныхДокументов.Вставить("ПлатежноРасчетныйДокумент",Объект.Ссылка);
				Если Не СостояниеПлатежноРасчетныхДокументов.Свойство("ПервичныйОбразИРеквизиты") Тогда
					СостояниеПлатежноРасчетныхДокументов.Вставить("ПервичныйОбразИРеквизиты");
				КонецЕсли;

				ПлатежноРасчетныеДокументы.ЗарегестрироватьИсполнениеЗаявки(СостояниеПлатежноРасчетныхДокументов);
				//СостояниеПлатежноРасчетныхДокументов = Неопределено;
			КонецЕсли;

			Если РезультатВывода.Колонки.Найти("ИтераторИмяСекции") <> Неопределено Тогда
				// Получим строки остатков
				Для каждого ТекСтрокаОстатков Из СтрокаВывода.Строки[0].Строки Цикл
					Если ЗначениеЗаполнено(ТекСтрокаОстатков["ИтераторИмяСекции"]) Тогда
						ЗаполнитьЗначенияСвойств(Объект.Остатки.Добавить(), ТекСтрокаОстатков);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ПараФайлов.ФорматФайлаСтруктура) И ТипЗнч(Объект) <> Тип("ДокументОбъект.ВыпискаИзЛицевогоСчета") Тогда

				Для каждого ТекСтрока Из СтрокаВывода.Строки Цикл

					ИмяСекции = "";
					ИмяТабличнойЧасти = "";
					Для каждого ГруппировкаСтрок Из ПараметрыГруппировок Цикл

						Если ГруппировкаСтрок.Ключ = ИдентификаторДокумента Тогда
							// значит будет 1 строка табличной части
							ИмяСекции = "";
							ИмяТабличнойЧасти = ГруппировкаСтрок.Значение;
							Прервать;
						ИначеЕсли РезультатВывода.Колонки.Найти(ГруппировкаСтрок.Ключ+"ИмяСекции")<> Неопределено Тогда
							Если ЗначениеЗаполнено(ТекСтрока[ГруппировкаСтрок.Ключ+"ИмяСекции"]) Тогда
								ИмяСекции = ГруппировкаСтрок.Ключ;
								ИмяТабличнойЧасти = ГруппировкаСтрок.Значение;
							    Прервать;
							КонецЕсли;
						КонецЕсли;

					КонецЦикла;

					Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда

						РеквизитыТЧ = Новый Структура;
						Для каждого ТекРеквизит Из Объект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты Цикл

							Если РезультатВывода.Колонки.Найти(ИмяСекции+ТекРеквизит.Имя)<>Неопределено Тогда
								РеквизитыТЧ.Вставить(ТекРеквизит.Имя, ТекСтрока[ИмяСекции+ТекРеквизит.Имя]);
							Иначе
								//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В табличной части "+ИмяТабличнойЧасти+" не найден реквизит "+ТекРеквизит.Имя);
							КонецЕсли;

						КонецЦикла;
						НоваяСтрокаДокумента = Объект[ИмяТабличнойЧасти].Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумента, РеквизитыТЧ);

						Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗапросНаВыяснениеПринадлежностиПлатежа") Тогда

							СтруктураОФК = Новый Структура;
							Для каждого Колонка Из РезультатВывода.Колонки Цикл

								ИмяКолонки = Колонка.Имя;
								Если Лев(ИмяКолонки, 17) = "ZF_PPСтруктураОФК" Тогда
									СтруктураОФК.Вставить(Сред(ИмяКолонки, 18), ТекСтрока[ИмяКолонки]);
								КонецЕсли;

							КонецЦикла;
							НоваяСтрокаДокумента.ПервичныйОбразИРеквизитыОФК = Новый ХранилищеЗначения(СтруктураОФК);

							//Если СостояниеПлатежноРасчетныхДокументов = Неопределено Тогда
							//СостояниеПлатежноРасчетныхДокументов = Новый Структура("ПлатежноРасчетныйДокумент, ПервичныйОбразИРеквизиты", Объект.Ссылка, СтруктураОФК);
							//СостояниеПлатежноРасчетныхДокументов.Вставить("GUIDКО", СтруктураОФК["ОФКGUID"]);
							//СостояниеПлатежноРасчетныхДокументов.Вставить("ПлатежноРасчетныйДокумент",Объект.Ссылка);
							СостояниеПлатежноРасчетныхДокументов.Вставить("ПлатежноРасчетныйДокумент",Объект.Ссылка);
							Если Не СостояниеПлатежноРасчетныхДокументов.Свойство("ПервичныйОбразИРеквизиты") Тогда
								СостояниеПлатежноРасчетныхДокументов.Вставить("ПервичныйОбразИРеквизиты", СтруктураОФК);
							КонецЕсли;

							ПлатежноРасчетныеДокументы.ЗарегестрироватьИсполнениеЗаявки(СостояниеПлатежноРасчетныхДокументов);

						КонецЕсли;

					КонецЕсли;

				КонецЦикла;

			Иначе

				// Заполняем ТЧ движения документов

				// Структура - таблица значений для передачи параметров в процедуры создания документов.
				// В колонке СписокПП хранится таблица значений, созданная из файла расшифровки
				// пустая таблица значений СписокПП получается из фунции СтруктураФайлаРасшифровкиВыписки()

				Структура = Новый ТаблицаЗначений;
				Структура.Колонки.Добавить("НомерЛС");
				Структура.Колонки.Добавить("ДатаВыписки");
				Структура.Колонки.Добавить("СписокПП");
				Структура.Колонки.Добавить("GUIDВыписки");
				//Прайд
				Структура.Колонки.Добавить("НомерВыписки");
				Структура.Колонки.Добавить("НомерПП");
				Структура.Колонки.Добавить("ДатаПП");
				//Структура.Колонки.Добавить("СписокППУ");
				//Структура.Колонки.Добавить("СписокППН");
				Структура.Колонки.Добавить("ПечатныйОбраз");
				//

				СписокПП = Новый ТаблицаЗначений;
				СписокПП.Колонки.Добавить("НомерПП");
				СписокПП.Колонки.Добавить("ДатаПП");
				СписокПП.Колонки.Добавить("GUID");
				СписокПП.Колонки.Добавить("РасчСчПл");
				СписокПП.Колонки.Добавить("СписокСтрокПП");
				СписокПП.Колонки.Добавить("GUIDДок");
				СписокПП.Колонки.Добавить("НомерДок");
				СписокПП.Колонки.Добавить("ДатаДок");
				СписокПП.Колонки.Добавить("ИмяДок");
				СписокПП.Колонки.Добавить("ПечатныйОбраз");

				СписокСтрокПП = Новый ТаблицаЗначений;
				СписокСтрокПП.Колонки.Добавить("КБК");
				СписокСтрокПП.Колонки.Добавить("ТипКБК");
				СписокСтрокПП.Колонки.Добавить("КодЦели");
				СписокСтрокПП.Колонки.Добавить("НомерБО");
				СписокСтрокПП.Колонки.Добавить("ОКАТО");
				СписокСтрокПП.Колонки.Добавить("Сумма");
				СписокСтрокПП.Колонки.Добавить("ЭтоСписание");
				СписокСтрокПП.Колонки.Добавить("Операция");
				СписокСтрокПП.Колонки.Добавить("Дебет");
                СписокСтрокПП.Колонки.Добавить("Кредит");
				СписокСтрокПП.Колонки.Добавить("ПечатныйОбраз");

				Если ЗначениеЗаполнено(РеквизитыСтруктурыВРасшифровке["BD"].Получить("GUIDВыписки")) Тогда
					GUIDВыписки = РеквизитыСтруктурыВРасшифровке["BD"].Получить("GUIDВыписки");
				ИначеЕсли ЗначениеЗаполнено(РеквизитыСтруктурыВРасшифровке["BH"].Получить("GUIDВыписки")) Тогда
					GUIDВыписки = РеквизитыСтруктурыВРасшифровке["BH"].Получить("GUIDВыписки");
				ИначеЕсли ЗначениеЗаполнено(РеквизитыСтруктурыВРасшифровке["SP"].Получить("GUIDВыписки")) Тогда
					GUIDВыписки = РеквизитыСтруктурыВРасшифровке["SP"].Получить("GUIDВыписки");
				КонецЕсли;

				//Цикл по строкам документа VT
				Для Счетчик = 0 По СтрокаВывода.Строки.Количество()-1 Цикл             //!!!

					Если Счетчик = 0 И НЕ ЗначениеЗаполнено(GUIDВыписки) Тогда
						Продолжить;
					КонецЕсли;

					ТекСтрокаДвижений = СтрокаВывода.Строки[Счетчик];
					Для Каждого ТекИмяСекции Из СоответствиеРеквизитовГруппировок Цикл
						Если ТекСтрокаДвижений.Строки.Найти(ТекИмяСекции.Ключ+"ИмяСекции") <> Неопределено Тогда    //*-*
							Если ПустаяСтрока(ТекСтрокаДвижений[ТекИмяСекции.Ключ+"ИмяСекции"]) Тогда
								Продолжить;
							КонецЕсли;
						Прервать;
						КонецЕсли; //*-*


						СоответствиеРеквизитовТекущейСекции = ТекИмяСекции.Значение;

						ПроизвольныеПараметры = Новый Соответствие;
						Если СоответствиеРеквизитовТекущейСекции[ТекИмяСекции.Ключ+"ПроизвольныеПараметры"] = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						Для каждого ТекПараметр Из СоответствиеРеквизитовТекущейСекции[ТекИмяСекции.Ключ+"ПроизвольныеПараметры"] Цикл

							ПроизвольныеПараметры.Вставить(ТекПараметр.Ключ, ТекСтрокаДвижений[СтрЗаменить(ТекПараметр.Значение, ".", "")]);

						КонецЦикла;


						Если ПроцедурыОбработкиСтрок.Получить(ТекИмяСекции.Ключ) = Неопределено Тогда//Если СоответствиеРеквизитовТекущейСекции.Получить("ВыполняемоеДействие") = Неопределено Тогда
							// если не задано действие, то нет смысла читать расшифровку и обрабатывать дальше
							Продолжить;
						КонецЕсли;

						// Прочитаем вложенные группировки. Там находится расшифровка

						Для каждого УровеньГруппировки1 Из ТекСтрокаДвижений.Строки Цикл

							ЕстьРасшифровка = Истина;
							GUIDBD          = "";
							GUIDBH          = "";
							GUIDSP          = "";

							// проверяем есть ли расшифровка для этой секции
							Попытка
								 GUIDBD = УровеньГруппировки1[ТекИмяСекции.Ключ+"_"+СтрЗаменить(GUIDВыписки,".","")];
							Исключение
							КонецПопытки;

							Попытка
								 GUIDBH = УровеньГруппировки1[ТекИмяСекции.Ключ+"1_"+СтрЗаменить(GUIDВыписки,".","")];
							Исключение
							КонецПопытки;

							Попытка
								 GUIDSP = УровеньГруппировки1[ТекИмяСекции.Ключ+"2_"+СтрЗаменить(GUIDВыписки,".","")];
							Исключение
							КонецПопытки;


							Если ЗначениеЗаполнено(GUIDBD) Тогда    //расшифровка по BD

								ТекущиеКолонки  = РеквизитыСтруктурыВРасшифровке["BD"];
								ПрефиксПоля     = ТекИмяСекции.Ключ + "_";

								ИмяГруппировки2 = "BDPD";
								ИмяГруппировки3 = "BDPDST";

							ИначеЕсли ЗначениеЗаполнено(GUIDBH) Тогда  //расшифровка по BH

								ТекущиеКолонки  = РеквизитыСтруктурыВРасшифровке["BH"];
								ПрефиксПоля     = ТекИмяСекции.Ключ + "1_";

								//ИмяГруппировки2 = "ZR";
								//ИмяГруппировки3 = "ZRST";

								//Прайд
								ИмяГруппировки2_1 = "ZV";
								ИмяГруппировки3_1 = "ZVDOC";
								//

							ИначеЕсли ЗначениеЗаполнено(GUIDSP) Тогда  //расшифровка по BH

								ТекущиеКолонки  = РеквизитыСтруктурыВРасшифровке["SP"];
								ПрефиксПоля     = ТекИмяСекции.Ключ + "2_";

								ИмяГруппировки2 = "SPD";
								ИмяГруппировки3 = "SPRR";

							Иначе
								ЕстьРасшифровка = Ложь;
							КонецЕсли;

							Если ЕстьРасшифровка Тогда
								СтруктураВыписки = Структура.Добавить();
								Если ТекущиеКолонки.Получить("НомерЛС") <> Неопределено Тогда
									СтруктураВыписки.НомерЛС = УровеньГруппировки1[ПрефиксПоля + СтрЗаменить(ТекущиеКолонки.Получить("НомерЛС"),".","")];
								КонецЕсли;
								Если ТекущиеКолонки.Получить("ДатаВыписки") <> Неопределено Тогда
									СтруктураВыписки.ДатаВыписки = УровеньГруппировки1[ПрефиксПоля + СтрЗаменить(ТекущиеКолонки.Получить("ДатаВыписки"),".","")];
								КонецЕсли;
								Если ТекущиеКолонки.Получить("GUIDВыписки") <> Неопределено Тогда
									СтруктураВыписки.GUIDВыписки = УровеньГруппировки1[ПрефиксПоля + СтрЗаменить(ТекущиеКолонки.Получить("GUIDВыписки"),".","")];
								КонецЕсли;
								//Прайд
								Если ТекущиеКолонки.Получить("НомерВыписки") <> Неопределено Тогда
									СтруктураВыписки.НомерВыписки = УровеньГруппировки1[ПрефиксПоля + СтрЗаменить(ТекущиеКолонки.Получить("НомерВыписки"),".","")];
								КонецЕсли;
								Если ТекущиеКолонки.Получить("НомерПП") <> Неопределено Тогда
									СтруктураВыписки.НомерПП = УровеньГруппировки1[ПрефиксПоля + СтрЗаменить(ТекущиеКолонки.Получить("НомерПП"),".","")];
								КонецЕсли;
								Если ТекущиеКолонки.Получить("ДатаПП") <> Неопределено Тогда
									СтруктураВыписки.ДатаПП = УровеньГруппировки1[ПрефиксПоля + СтрЗаменить(ТекущиеКолонки.Получить("ДатаПП"),".","")];
								КонецЕсли;
								//Если ТекущиеКолонки.Получить("ПечатныйОбраз") <> Неопределено Тогда
								//	ВременнаяСтруктураУФ = Новый Структура;
								//	Для Каждого ТекКолонкаЗначение Из ТекущиеКолонки.Получить("ПечатныйОбраз") Цикл
								//		ВременнаяСтруктураУФ.Вставить(ТекКолонкаЗначение.Ключ, УровеньГруппировки1[ПрефиксПоля + СтрЗаменить(ТекКолонкаЗначение.Значение, ".", "")]);
								//	КонецЦикла;
								//	СтруктураВыписки.ПечатныйОбраз = ВременнаяСтруктураУФ;
								//КонецЕсли;
								//

								//Цикл по ТЧ документов  BD, BH  ( BDPD, ZVDOC)
								Для каждого УровеньГруппировки2 Из УровеньГруппировки1.Строки Цикл

									Если РезультатВывода.Колонки.Найти(ПрефиксПоля + "ПечатныйОбразВидОперации")<>Неопределено И УровеньГруппировки2[ПрефиксПоля + "ПечатныйОбразВидОперации"] = "ZV" Тогда
									    ТекущиеКолонки = РеквизитыСтруктурыВРасшифровке[ИмяГруппировки2_1];       // ["ZV"]
										СтрокаСпискаПП = СписокПП.Добавить();

										Для каждого ТекКолонка Из ТекущиеКолонки Цикл
											Если НЕ ЗначениеЗаполнено(ТекКолонка.Значение) Тогда
												Продолжить;
											КонецЕсли;
											Если ТипЗнч(ТекКолонка.Значение) = Тип("Структура") Тогда
												ВременнаяСтруктура = Новый Структура;
												Для Каждого ТекКолонкаЗначение Из ТекКолонка.Значение Цикл
													ВременнаяСтруктура.Вставить(ТекКолонкаЗначение.Ключ, УровеньГруппировки2[ПрефиксПоля + СтрЗаменить(ТекКолонкаЗначение.Значение, ".", "")]);
												КонецЦикла;
												СтрокаСпискаПП[ТекКолонка.Ключ] = ВременнаяСтруктура;
											Иначе
												СтрокаСпискаПП[ТекКолонка.Ключ] = УровеньГруппировки2[ПрефиксПоля + СтрЗаменить(ТекКолонка.Значение, ".", "")];
											КонецЕсли;
										КонецЦикла;


										//Цикл по ТЧ документов  BH(/ZVDOC/ZVDOCOSN/ZVDOCPOL)
										Для каждого УровеньГруппировки3 Из УровеньГруппировки2.Строки Цикл
											ТекущиеКолонки = РеквизитыСтруктурыВРасшифровке[ИмяГруппировки3_1];    //["ZVDOC"]

											СтрокаПП = СписокСтрокПП.Добавить();
											Для каждого ТекКолонка Из ТекущиеКолонки Цикл
												Если НЕ ЗначениеЗаполнено(ТекКолонка.Значение) Тогда
													Продолжить;
												КонецЕсли;
												Если ТипЗнч(ТекКолонка.Значение) = Тип("Структура") Тогда
													ВременнаяСтруктура = Новый Структура;
													Для Каждого ТекКолонкаЗначение Из ТекКолонка.Значение Цикл
														ВременнаяСтруктура.Вставить(ТекКолонкаЗначение.Ключ, УровеньГруппировки3[ПрефиксПоля + СтрЗаменить(ТекКолонкаЗначение.Значение, ".", "")]);
														СтрокаСпискаПП[ТекКолонка.Ключ].Вставить(ТекКолонкаЗначение.Ключ, УровеньГруппировки3[ПрефиксПоля + СтрЗаменить(ТекКолонкаЗначение.Значение, ".", "")]);
													КонецЦикла;
													СтрокаПП[ТекКолонка.Ключ] = ВременнаяСтруктура;

													Если  ИмяГруппировки2_1 = "ZV" И ТекКолонка.Ключ = "ПечатныйОбраз" Тогда
														 Если РезультатВывода.Колонки.Найти(ПрефиксПоля + "ПечатныйОбразВидОперации")<>Неопределено И УровеньГруппировки2[ПрефиксПоля + "ПечатныйОбразВидОперации"] = "ZV" Тогда
															  Если РеквизитыСтруктурыВРасшифровке["ZVDOCOSN"] <> Неопределено Тогда
																  КолонкиДокОснования = РеквизитыСтруктурыВРасшифровке["ZVDOCOSN"];
																  Для Каждого ТекКолонкаЗначение Из КолонкиДокОснования Цикл
																	  //Если ТипЗнч(ТекКолонкаЗначение.Значение) <> Тип("Строка") Тогда
																	  //    Продолжить;
																	  //КонецЕсли;
																	 Если ТипЗнч(ТекКолонкаЗначение.Значение) = Тип("Структура") Тогда
																		ВременнаяСтруктура = Новый Структура;
																		Для Каждого ТекКолонкаЗначение2 Из ТекКолонкаЗначение.Значение Цикл
																			//ВременнаяСтруктура.Вставить(ТекКолонкаЗначение2.Ключ, УровеньГруппировки3[ПрефиксПоля + СтрЗаменить(ТекКолонкаЗначение2.Значение, ".", "")]);
																			СтрокаСпискаПП[ТекКолонка.Ключ].Вставить(ТекКолонкаЗначение2.Ключ, УровеньГруппировки3[ПрефиксПоля + СтрЗаменить(ТекКолонкаЗначение2.Значение, ".", "")]);
																	  		СтрокаПП[ТекКолонка.Ключ].Вставить(ТекКолонкаЗначение2.Ключ, УровеньГруппировки3[ПрефиксПоля + СтрЗаменить(ТекКолонкаЗначение2.Значение, ".", "")]);
																		КонецЦикла;
																	Иначе
																	  СтрокаСпискаПП[ТекКолонка.Ключ].Вставить(ТекКолонкаЗначение.Ключ, УровеньГруппировки3[ПрефиксПоля + СтрЗаменить(ТекКолонкаЗначение.Значение, ".", "")]);
																	  СтрокаПП[ТекКолонка.Ключ].Вставить(ТекКолонкаЗначение.Ключ, УровеньГруппировки3[ПрефиксПоля + СтрЗаменить(ТекКолонкаЗначение.Значение, ".", "")]);
																	КонецЕсли;
																  КонецЦикла;
															  КонецЕсли;
															  Если РеквизитыСтруктурыВРасшифровке["ZVDOCPOL"] <> Неопределено Тогда
																  КолонкиДокОснования = РеквизитыСтруктурыВРасшифровке["ZVDOCPOL"];
																  Для Каждого ТекКолонкаЗначение Из КолонкиДокОснования Цикл
																	  //Если ТипЗнч(ТекКолонкаЗначение.Значение) <> Тип("Строка") Тогда
																	  //    Продолжить;
																	  //КонецЕсли;
																	 Если ТипЗнч(ТекКолонкаЗначение.Значение) = Тип("Структура") Тогда
																		ВременнаяСтруктура = Новый Структура;
																		Для Каждого ТекКолонкаЗначение2 Из ТекКолонкаЗначение.Значение Цикл
																			//ВременнаяСтруктура.Вставить(ТекКолонкаЗначение2.Ключ, УровеньГруппировки3[ПрефиксПоля + СтрЗаменить(ТекКолонкаЗначение2.Значение, ".", "")]);
																			СтрокаСпискаПП[ТекКолонка.Ключ].Вставить(ТекКолонкаЗначение2.Ключ, УровеньГруппировки3[ПрефиксПоля + СтрЗаменить(ТекКолонкаЗначение2.Значение, ".", "")]);
																			СтрокаПП[ТекКолонка.Ключ].Вставить(ТекКолонкаЗначение2.Ключ, УровеньГруппировки3[ПрефиксПоля + СтрЗаменить(ТекКолонкаЗначение2.Значение, ".", "")]);
																		КонецЦикла;

																	Иначе
																	  СтрокаСпискаПП[ТекКолонка.Ключ].Вставить(ТекКолонкаЗначение.Ключ, УровеньГруппировки3[ПрефиксПоля + СтрЗаменить(ТекКолонкаЗначение.Значение, ".", "")]);
																	  СтрокаПП[ТекКолонка.Ключ].Вставить(ТекКолонкаЗначение.Ключ, УровеньГруппировки3[ПрефиксПоля + СтрЗаменить(ТекКолонкаЗначение.Значение, ".", "")]);
																	КонецЕсли;
																  КонецЦикла;
															  КонецЕсли;
														  КонецЕсли;
													КонецЕсли;
												Иначе
													СтрокаПП[ТекКолонка.Ключ] = УровеньГруппировки3[ПрефиксПоля + СтрЗаменить(ТекКолонка.Значение, ".", "")];
												КонецЕсли;
											КонецЦикла;
										КонецЦикла;
										СтрокаСпискаПП.СписокСтрокПП = СписокСтрокПП.Скопировать();
										СписокСтрокПП.Очистить();

									Иначе
										ТекущиеКолонки = РеквизитыСтруктурыВРасшифровке[ИмяГруппировки2];       // ["BDPD"]
										СтрокаСпискаПП = СписокПП.Добавить();

										Для каждого ТекКолонка Из ТекущиеКолонки Цикл
											Если НЕ ЗначениеЗаполнено(ТекКолонка.Значение) Тогда
												Продолжить;
											КонецЕсли;
											Если ТипЗнч(ТекКолонка.Значение) = Тип("Структура") Тогда
												ВременнаяСтруктура = Новый Структура;
												Для Каждого ТекКолонкаЗначение Из ТекКолонка.Значение Цикл
													ВременнаяСтруктура.Вставить(ТекКолонкаЗначение.Ключ, УровеньГруппировки2[ПрефиксПоля + СтрЗаменить(ТекКолонкаЗначение.Значение, ".", "")]);
												КонецЦикла;
												СтрокаСпискаПП[ТекКолонка.Ключ] = ВременнаяСтруктура;
											Иначе
												СтрокаСпискаПП[ТекКолонка.Ключ] = УровеньГруппировки2[ПрефиксПоля + СтрЗаменить(ТекКолонка.Значение, ".", "")];
											КонецЕсли;
										КонецЦикла;

										Для каждого УровеньГруппировки3 Из УровеньГруппировки2.Строки Цикл
											ТекущиеКолонки = РеквизитыСтруктурыВРасшифровке[ИмяГруппировки3];    //["BDPDST"]

											СтрокаПП = СписокСтрокПП.Добавить();
											Для каждого ТекКолонка Из ТекущиеКолонки Цикл
												Если НЕ ЗначениеЗаполнено(ТекКолонка.Значение) Тогда
													Продолжить;
												КонецЕсли;
												Если ТипЗнч(ТекКолонка.Значение) = Тип("Структура") Тогда
													ВременнаяСтруктура = Новый Структура;
													Для Каждого ТекКолонкаЗначение Из ТекКолонка.Значение Цикл
														ВременнаяСтруктура.Вставить(ТекКолонкаЗначение.Ключ, УровеньГруппировки3[ПрефиксПоля + СтрЗаменить(ТекКолонкаЗначение.Значение, ".", "")]);
													КонецЦикла;
													Если  ИмяГруппировки3 = "ZRST" И ТекКолонка.Ключ = "ПечатныйОбраз" Тогда
														Если НЕ СтрокаСпискаПП[ТекКолонка.Ключ].Свойство("РасшифровкаПлатежа") Тогда
															СтрокаСпискаПП[ТекКолонка.Ключ].Вставить("РасшифровкаПлатежа", Новый Массив);
													    КонецЕсли;
														СтрокаСпискаПП[ТекКолонка.Ключ]["РасшифровкаПлатежа"].Добавить(ВременнаяСтруктура);
	                                                Иначе
														СтрокаПП[ТекКолонка.Ключ] = ВременнаяСтруктура;
													КонецЕсли;
													Если  ИмяГруппировки2 = "ZR" И ТекКолонка.Ключ = "ПечатныйОбраз" Тогда
														 Если РезультатВывода.Колонки.Найти(ПрефиксПоля + "ПечатныйОбразВидОперации")<>Неопределено И УровеньГруппировки2[ПрефиксПоля + "ПечатныйОбразВидОперации"] = "ZR" Тогда
															  Если РеквизитыСтруктурыВРасшифровке["ZROSN"] <> Неопределено Тогда
																  КолонкиДокОснования = РеквизитыСтруктурыВРасшифровке["ZROSN"];
																  Для Каждого ТекКолонкаЗначение Из КолонкиДокОснования Цикл
																	  СтрокаСпискаПП[ТекКолонка.Ключ].Вставить(ТекКолонкаЗначение.Ключ, УровеньГруппировки3[ПрефиксПоля + СтрЗаменить(ТекКолонкаЗначение.Значение, ".", "")]);
																  КонецЦикла;
															  КонецЕсли;
														  ИначеЕсли РезультатВывода.Колонки.Найти(ПрефиксПоля + "ПечатныйОбразВидОперации")<>Неопределено И УровеньГруппировки2[ПрефиксПоля + "ПечатныйОбразВидОперации"] = "ZV" Тогда
															  Если РеквизитыСтруктурыВРасшифровке["ZVDOCOSN"] <> Неопределено Тогда
																  КолонкиДокОснования = РеквизитыСтруктурыВРасшифровке["ZVDOCOSN"];
																  Для Каждого ТекКолонкаЗначение Из КолонкиДокОснования Цикл
																	  СтрокаСпискаПП[ТекКолонка.Ключ].Вставить(ТекКолонкаЗначение.Ключ, УровеньГруппировки3[ПрефиксПоля + СтрЗаменить(ТекКолонкаЗначение.Значение, ".", "")]);
																  КонецЦикла;
															  КонецЕсли;
															  Если РеквизитыСтруктурыВРасшифровке["ZVDOCPOL"] <> Неопределено Тогда
																  КолонкиДокОснования = РеквизитыСтруктурыВРасшифровке["ZVDOCPOL"];
																  Для Каждого ТекКолонкаЗначение Из КолонкиДокОснования Цикл
																	  Если ТипЗнч(ТекКолонкаЗначение.Значение) <> Тип("Строка") Тогда
																		  Продолжить;
																	  КонецЕсли;
																	  СтрокаСпискаПП[ТекКолонка.Ключ].Вставить(ТекКолонкаЗначение.Ключ, УровеньГруппировки3[ПрефиксПоля + СтрЗаменить(ТекКолонкаЗначение.Значение, ".", "")]);
																  КонецЦикла;
															  КонецЕсли;
														  КонецЕсли;
													КонецЕсли;
												Иначе
													СтрокаПП[ТекКолонка.Ключ] = УровеньГруппировки3[ПрефиксПоля + СтрЗаменить(ТекКолонка.Значение, ".", "")];
												КонецЕсли;
											КонецЦикла;
										КонецЦикла;

										СтрокаСпискаПП.СписокСтрокПП = СписокСтрокПП.Скопировать();
										СписокСтрокПП.Очистить();
									КонецЕсли;
								КонецЦикла;

								СтруктураВыписки.СписокПП = СписокПП;
							КонецЕсли;

							ПараметрНомерДок 			= ПроизвольныеПараметры.Получить("НомерДок");
							ПараметрДатаДок 			= ПроизвольныеПараметры.Получить("ДатаДок");
							ПараметрИмяДок              = ПроизвольныеПараметры.Получить("ИмяДок");
							ПараметрГУИД 				= ПроизвольныеПараметры.Получить("GUIDПП");
							ПараметрСуммаПоступления	= ПроизвольныеПараметры.Получить("СуммаПоступления");
							ПараметрСуммаСписания 		= ПроизвольныеПараметры.Получить("СуммаСписания");
							ПараметрКВД					= ПроизвольныеПараметры.Получить("КВД");
							ПараметрИсточникиСтредств	= ПроизвольныеПараметры.Получить("ИсточникиСредств");
							//Прайд
							ПараметрСуммаЗачета 		= ПроизвольныеПараметры.Получить("СуммаЗачета");
							ПараметрНомерПервичногоДокумента = ПроизвольныеПараметры.Получить("НомерПП");
							//

							Если ПараметрСуммаПоступления<>Неопределено Тогда
								ПараметрСуммаПоступления = Число(ПараметрСуммаПоступления);
							Иначе
								ПараметрСуммаПоступления = 0;
							КонецЕсли;
							Если ПараметрСуммаСписания<>Неопределено Тогда
								ПараметрСуммаСписания = Число(ПараметрСуммаСписания);
							Иначе
								ПараметрСуммаСписания = 0;
							КонецЕсли;

							//Прайд
							Если ПараметрСуммаЗачета<>Неопределено Тогда
								ПараметрСуммаЗачета = Число(ПараметрСуммаЗачета);
							Иначе
								ПараметрСуммаЗачета = 0;
							КонецЕсли;
							//

							РазложениеИсполняемыхДействий = СтрРазделить(ПроцедурыОбработкиСтрок.Получить(ТекИмяСекции.Ключ), ";");
							ИсполняющийДокумент = Неопределено;
							Для каждого ВыполняемоеДействие Из РазложениеИсполняемыхДействий Цикл
								// выполняем действие для данной строки
								Если ВРЕГ(ВыполняемоеДействие) = ВРЕГ("ДокументЗадающийБюджетныеДанные") Тогда
									ИсполняющийДокумент = БиблиотекаФункцийОбмена.ОпределитьДокументЗадающийБюджетныеДанные(Объект.ЛицевойСчет.Код,
																															ПараметрНомерДок,
																															ПараметрДатаДок,
																															ПараметрГУИД);
								ИначеЕсли ВРЕГ(ВыполняемоеДействие) = ВРЕГ("НовоеКассовоеПоступление") Тогда
									Если ПараметрСуммаПоступления>0 Тогда

										Если ЗначениеЗаполнено(GUIDSP) Тогда

											 ИсполняющийДокумент = БиблиотекаФункцийОбмена.ОпределитьРасшифровку(	Структура,
										                                                                            Объект.Ссылка,
																													ПараметрГУИД,
																													ПараметрСуммаПоступления);
									    КонецЕсли;

										Если НЕ ЗначениеЗаполнено(ИсполняющийДокумент) Тогда
											 //ИсполняющийДокумент = БиблиотекаФункцийОбмена.СоздатьКассовоеПоступление(Структура,
											 //   																	  Объект.Ссылка,
											 //   																	  ПараметрГУИД,
											 //   																	  ПараметрКВД,
											 //   																	  ПараметрИсточникиСтредств,
											 //   																	  ПараметрСуммаПоступления,
											 // 																	      ПроизвольныеПараметры);

											 //Прайд
											 ИсполняющийДокумент = СоздатьКассовоеПоступление(						  Задание,
											 																		  Структура,
											    																	  Объект.Ссылка,
											    																	  ПараметрГУИД,
											    																	  ПараметрКВД,
											    																	  ПараметрИсточникиСтредств,
											    																	  ПараметрСуммаПоступления,
											  																	      ПроизвольныеПараметры,
											 																		  ОписаниеОбъектаОшибки,
																													  ПараФайлов);
											 //
										КонецЕсли;
									КонецЕсли;
								ИначеЕсли ВРЕГ(ВыполняемоеДействие) = ВРЕГ("ПолучитьЗаявку") Тогда

									//Прайд
									Если ЗначениеЗаполнено(GUIDBD) Тогда
									//
										Если ПараметрСуммаСписания>0 Тогда
											ИсполняющийДокумент = БиблиотекаФункцийОбмена.ОпределитьЗаявку(	Объект.Организация,
																											Объект.ЛицевойСчет.Код,
																											ПараметрНомерДок,
																											ПараметрДатаДок,
																											ПараметрСуммаСписания);

										КонецЕсли;
										Если НЕ ЗначениеЗаполнено(ИсполняющийДокумент) Тогда

											Если ПараметрСуммаСписания>0  Тогда
												//ИсполняющийДокумент =  БиблиотекаФункцийОбмена.СоздатьКассовоеВыбытие(	Структура,
												//																		Объект.Ссылка,
												//																		ПараметрГУИД,
												// 																		ПараметрКВД,
												//																		ПараметрИсточникиСтредств,
												//																		ПараметрСуммаСписания,
												//																		ПроизвольныеПараметры);

												//Прайд
										  		ИсполняющийДокумент =  СоздатьКассовоеВыбытие(	Задание,
																														Структура,
																														Объект.Ссылка,
																														ПараметрГУИД,
												 																		ПараметрКВД,
																														ПараметрИсточникиСтредств,
																														ПараметрСуммаСписания,
																														ПроизвольныеПараметры,
																														ОписаниеОбъектаОшибки,
																														ПараФайлов);
												//
											КонецЕсли
										Иначе
											 БиблиотекаФункцийОбмена.ЗаписатьОбразПервичногоДокументаЗаявки(	ИсполняющийДокумент,
											 																	Структура,
																												Объект.Ссылка,
																												Объект.ДатаВыписки,
																												ПараметрГУИД,
											 																	ПроизвольныеПараметры);

											//Прайд
											 ЗаписьРС = РегистрыСведений.Прайд_СтатусыДокументовВыгрузкаВКазначейство.СоздатьМенеджерЗаписи();
											 ЗаписьРс.Период = ТекущаяДата();
											 ЗаписьРс.ВыгружаемыйДокумент = ИсполняющийДокумент;
											 ЗаписьРс.ДокументЗадание = Объект.Ссылка;
											 ЗаписьРС.Статус = Справочники.Прайд_СтатусыВыгрузкиДокументовВКазначейство.ПодтвержденВыпиской;
											 ЗаписьРС.Записать();
											//
										КонецЕсли;
								   ИначеЕсли ЗначениеЗаполнено(GUIDBH) Тогда

										Если ПараметрСуммаЗачета < 0 Тогда
											ВидДокумента = "КассовоеВыбытие";
										   	ИсполняющийДокумент = БиблиотекаФункцийОбмена.Прайд_ОпределитьДокумент(ПараметрНомерДок, ПараметрДатаДок, Объект, ВидДокумента);
										КонецЕсли;

										Если НЕ ЗначениеЗаполнено(ИсполняющийДокумент) Тогда
											Если ПараметрСуммаЗачета>0 Тогда
												ИсполняющийДокумент = СоздатьКассовоеПоступлениеПоЗВ(						Задание, Структура,
																															Объект.Ссылка,
																															ПараметрГУИД,
																															ПараметрКВД,
																															ПараметрИсточникиСтредств,
																															ПараметрНомерДок,
																															ПараметрДатаДок,
																															ПараметрСуммаЗачета,
																															ПроизвольныеПараметры,
																															ОписаниеОбъектаОшибки,
																															ПараФайлов);


											ИначеЕсли ПараметрСуммаЗачета<0 Тогда

												ИсполняющийДокумент = СоздатьКассовоеВыбытиеПоЗВ(							Задание, Структура,
																															Объект.Ссылка,
																															ПараметрГУИД,
																															ПараметрКВД,
																															ПараметрИсточникиСтредств,
																															ПараметрНомерДок,
																															ПараметрДатаДок,
																															ПараметрСуммаЗачета,
																															ПроизвольныеПараметры,
																															ОписаниеОбъектаОшибки,
																															ПараФайлов);
											КонецЕсли;
										КонецЕсли;
								   КонецЕсли;
								КонецЕсли;

							КонецЦикла;
							Если ЗначениеЗаполнено(ИсполняющийДокумент) Тогда
								Объект.ДокументыДвижений.Добавить().ИсполняющийДокумент = ИсполняющийДокумент;
							КонецЕсли;
							Структура.Очистить();
							СписокСтрокПП.Очистить();
							СписокПП.Очистить();

						КонецЦикла;
						// для отработки поиска заявок, которые не вошли в файл BD
						Если ЗначениеЗаполнено(ПараФайлов.ФорматФайлаСтруктура) И ТекСтрокаДвижений.Строки.Количество() = 0 Тогда

							ПараметрНомерДок 			= ПроизвольныеПараметры.Получить("НомерДок");
							ПараметрДатаДок 			= ПроизвольныеПараметры.Получить("ДатаДок");
							ПараметрИмяДок              = ПроизвольныеПараметры.Получить("ИмяДок");
							ПараметрГУИД 				= ПроизвольныеПараметры.Получить("GUIDПП");
							ПараметрСуммаПоступления	= ПроизвольныеПараметры.Получить("СуммаПоступления");
							ПараметрСуммаСписания 		= ПроизвольныеПараметры.Получить("СуммаСписания");
							ПараметрКВД					= ПроизвольныеПараметры.Получить("КВД");
							ПараметрИсточникиСтредств	= ПроизвольныеПараметры.Получить("ИсточникиСредств");

							Если ПараметрСуммаПоступления<>Неопределено Тогда
								ПараметрСуммаПоступления = Число(ПараметрСуммаПоступления);
							Иначе
								ПараметрСуммаПоступления = 0;
							КонецЕсли;
							Если ПараметрСуммаСписания<>Неопределено Тогда
								ПараметрСуммаСписания = Число(ПараметрСуммаСписания);
							Иначе
								ПараметрСуммаСписания = 0;
							КонецЕсли;

							РазложениеИсполняемыхДействий = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПроцедурыОбработкиСтрок.Получить(ТекИмяСекции.Ключ), ";");
							ИсполняющийДокумент = Неопределено;
							Для каждого ВыполняемоеДействие Из РазложениеИсполняемыхДействий Цикл

								Если ВРЕГ(ВыполняемоеДействие) = ВРЕГ("ПолучитьЗаявку") Тогда
									Если ПараметрСуммаСписания>0 Тогда
										ИсполняющийДокумент = БиблиотекаФункцийОбмена.ОпределитьЗаявку(	Объект.Организация,
																										Объект.ЛицевойСчет.Код,
																										ПараметрНомерДок,
																										ПараметрДатаДок,
																										ПараметрСуммаСписания);

						            КонецЕсли;
								КонецЕсли;

								Если ЗначениеЗаполнено(ИсполняющийДокумент) Тогда
									Объект.ДокументыДвижений.Добавить().ИсполняющийДокумент = ИсполняющийДокумент;
								КонецЕсли;

                            КонецЦикла;

						КонецЕсли;

						Если ТекИмяСекции.Ключ = "VPPOB" Тогда
							// в этой секции обрабатываем получение данных БО и ЗКР
							РазложениеИсполняемыхДействий = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПроцедурыОбработкиСтрок.Получить(ТекИмяСекции.Ключ), ";");
							Для каждого ВыполняемоеДействие Из РазложениеИсполняемыхДействий Цикл
								Если ВРЕГ(ВыполняемоеДействие) = ВРЕГ("ЗаписатьНомерБО") Тогда
									Если ПроизвольныеПараметры.Получить("НомерСсылкаБО") = Неопределено Тогда
										ПроизвольныеПараметры.Вставить("НомерСсылкаБО", "");
									КонецЕсли;
									Если ПроизвольныеПараметры.Получить("ДатаБО") = Неопределено Тогда
										ПроизвольныеПараметры.Вставить("ДатаБО", '00010101');
									КонецЕсли;
									Если ПроизвольныеПараметры.Получить("ИДОФКБО") = Неопределено Тогда
										ПроизвольныеПараметры.Вставить("ИДОФКБО", "");
									КонецЕсли;
									Если ПроизвольныеПараметры.Получить("НомерОФКБО") = Неопределено Тогда
										ПроизвольныеПараметры.Вставить("НомерОФКБО", "");
									КонецЕсли;
									Если ПроизвольныеПараметры.Получить("СуммаБО") = Неопределено Тогда
										ПроизвольныеПараметры.Вставить("СуммаБО", 0);
									КонецЕсли;
									Если ПроизвольныеПараметры.Получить("Сумма1БО") = Неопределено Тогда
										ПроизвольныеПараметры.Вставить("Сумма1БО", 0);
									КонецЕсли;
									Если ПроизвольныеПараметры.Получить("Сумма2БО") = Неопределено Тогда
										ПроизвольныеПараметры.Вставить("Сумма2БО", 0);
									КонецЕсли;

									ТипБО = ПроизвольныеПараметры.Получить("ТипБО");
									Если ТипБО = Неопределено Тогда
										Если СтрДлина(ПроизвольныеПараметры.Получить("НомерСсылкаБО")) = 15 тогда
											ТипБО = "1";
										КонецЕсли;
									КонецЕсли;

									Если ТипБО = "1" тогда
										ПроизвольныеПараметры.Вставить("НомерСсылкаБО", Лев(ПроизвольныеПараметры.Получить("НомерСсылкаБО"),2)+Прав(ПроизвольныеПараметры.Получить("НомерСсылкаБО"),9));
									Иначе
										ПроизвольныеПараметры.Вставить("НомерСсылкаБО",БиблиотекаФункцийОбмена.ОпределитьЗаявку(Объект.Организация, Объект.ЛицевойСчет.Код, ПроизвольныеПараметры.Получить("НомерСсылкаБО"), ПроизвольныеПараметры.Получить("ДатаБО"), ПроизвольныеПараметры.Получить("СуммаБО")));
									КонецЕсли;

									БиблиотекаФункцийОбмена.ЗаписатьНомерБюджетногоОбязательства(ПроизвольныеПараметры);

			//						Иначе
			//							Если ПроизвольныеПараметры.Получить("ТипБО") = "1" тогда
			//								ПроизвольныеПараметры.Вставить("НомерСсылкаБО",Лев(ПроизвольныеПараметры.Получить("НомерСсылкаБО"),2)+Прав(ПроизвольныеПараметры.Получить("НомерСсылкаБО"),9));
			//							Иначе
			//								ПроизвольныеПараметры.Вставить("НомерСсылкаБО",БиблиотекаФункцийОбмена.ОпределитьЗаявку(Объект.ЛицевойСчет.Код, ПроизвольныеПараметры.Получить("НомерСсылкаБО"), ПроизвольныеПараметры.Получить("ДатаБО"), ПроизвольныеПараметры.Получить("СуммаБО")));
			//							КонецЕсли;
			//
			////							Если не БиблиотекаФункцийОбмена.ЗаписатьНомерБюджетногоОбязательства(ПринятоеБО, ОписаниеПричины) тогда
			//							Если не БиблиотекаФункцийОбмена.ЗаписатьНомерБюджетногоОбязательства(ПроизвольныеПараметры) тогда
			//								ПрекратитьПроцесс = Истина;
			//  								ЗаписанОбъект = Ложь;
			//							КонецЕсли;
			//						КонецЕсли;
								КонецЕсли;


							КонецЦикла;
						КонецЕсли;

						Если ТекИмяСекции.Ключ = "VPPOD" Тогда

						РазложениеИсполняемыхДействий = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПроцедурыОбработкиСтрок.Получить(ТекИмяСекции.Ключ), ";");
							Для каждого ВыполняемоеДействие Из РазложениеИсполняемыхДействий Цикл
								Если ВРЕГ(ВыполняемоеДействие) = ВРЕГ("ЗаписатьНомерДО") Тогда
									Если ПроизвольныеПараметры.Получить("НомерДокДО") = Неопределено Тогда
										ПроизвольныеПараметры.Вставить("НомерДокДО", "");
									КонецЕсли;
									Если ПроизвольныеПараметры.Получить("ДатаДокДО") = Неопределено Тогда
										ПроизвольныеПараметры.Вставить("ДатаДокДО", '00010101');
									КонецЕсли;
									Если ПроизвольныеПараметры.Получить("УчНомерДО") = Неопределено Тогда
										ПроизвольныеПараметры.Вставить("УчНомерДО", "");
									КонецЕсли;
								КонецЕсли;

								БиблиотекаФункцийОбмена.ЗаписатьНомерДенежногоОбязательства(ПроизвольныеПараметры, Задание.Организация, Задание.КассовыйОрган)

							КонецЦикла;
						КонецЕсли;

					Конеццикла; //
				КонецЦикла;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ПараФайлов.ФорматФайлаСтруктура) Тогда
				Для Каждого ТекСтрокаДвижений Из СтрокаВывода.Строки Цикл
					//ТекСтрокаДвижений = СтрокаВывода.Строки[0];
					Если РезультатВывода.Колонки.Найти("ИтераторИмяСекции") <> Неопределено Тогда
						// Получим строки остатков
						Если ЗначениеЗаполнено(ТекСтрокаДвижений["ИтераторИмяСекции"]) Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;

					Для Каждого ТекИмяСекции Из СоответствиеРеквизитовГруппировок Цикл
						Если РезультатВывода.Колонки.Найти(ТекИмяСекции.Ключ+"ИмяСекции") = Неопределено
							ИЛИ ПустаяСтрока(ТекСтрокаДвижений[ТекИмяСекции.Ключ+"ИмяСекции"]) Тогда
							Продолжить;
						КонецЕсли;
						Прервать;
					Конеццикла;

					СоответствиеРеквизитовТекущейСекции = ТекИмяСекции.Значение;

					ПроизвольныеПараметры = Новый Соответствие;
					Если СоответствиеРеквизитовТекущейСекции[ТекИмяСекции.Ключ+"ПроизвольныеПараметры"] = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Для каждого ТекПараметр Из СоответствиеРеквизитовТекущейСекции[ТекИмяСекции.Ключ+"ПроизвольныеПараметры"] Цикл

						ПроизвольныеПараметры.Вставить(ТекПараметр.Ключ, ТекСтрокаДвижений[СтрЗаменить(ТекПараметр.Значение, ".", "")]);

					КонецЦикла;


					Если ПроцедурыОбработкиСтрок.Получить(ТекИмяСекции.Ключ) = Неопределено Тогда//Если СоответствиеРеквизитовТекущейСекции.Получить("ВыполняемоеДействие") = Неопределено Тогда
						// если не задано действие, то нет смысла читать расшифровку и обрабатывать дальше
						Продолжить;
					КонецЕсли;

						ПараметрНомерДок 			= ПроизвольныеПараметры.Получить("НомерДок");
						ПараметрДатаДок 			= ПроизвольныеПараметры.Получить("ДатаДок");
						ПараметрИмяДок              = ПроизвольныеПараметры.Получить("ИмяДок");
						ПараметрГУИД 				= ПроизвольныеПараметры.Получить("GUIDПП");
						ПараметрСуммаПоступления	= ПроизвольныеПараметры.Получить("СуммаПоступления");
						ПараметрСуммаСписания 		= ПроизвольныеПараметры.Получить("СуммаСписания");
						ПараметрКВД					= ПроизвольныеПараметры.Получить("КВД");
						ПараметрИсточникиСтредств	= ПроизвольныеПараметры.Получить("ИсточникиСредств");

						Если ПараметрСуммаПоступления<>Неопределено Тогда
							ПараметрСуммаПоступления = Число(ПараметрСуммаПоступления);
						КонецЕсли;
						Если ПараметрСуммаСписания<>Неопределено Тогда
							ПараметрСуммаСписания = Число(ПараметрСуммаСписания);
						КонецЕсли;

						РазложениеИсполняемыхДействий = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПроцедурыОбработкиСтрок.Получить(ТекИмяСекции.Ключ), ";");
						ИсполняющийДокумент = Неопределено;
						Для каждого ВыполняемоеДействие Из РазложениеИсполняемыхДействий Цикл
							// выполняем действие для данной строки
							Если ВРЕГ(ВыполняемоеДействие) = ВРЕГ("ДокументЗадающийБюджетныеДанные") Тогда
								ИсполняющийДокумент = БиблиотекаФункцийОбмена.ОпределитьДокументЗадающийБюджетныеДанные(Объект.ЛицевойСчет.Код,
																														ПараметрНомерДок,
																														ПараметрДатаДок,
																														ПараметрГУИД);
							ИначеЕсли ВРЕГ(ВыполняемоеДействие) = ВРЕГ("НовоеКассовоеПоступление") Тогда
								Если ПараметрСуммаПоступления>0 Тогда
									//ИсполняющийДокумент = БиблиотекаФункцийОбмена.СоздатьКассовоеПоступление(	Структура,
									//																			Объект.Ссылка,
									//																			ПараметрГУИД,
									//																			ПараметрКВД,
									//																			ПараметрИсточникиСтредств,
									//																			ПараметрСуммаПоступления);

									//Прайд
									ИсполняющийДокумент = СоздатьКассовоеПоступление(							Задание,Структура,
																												Объект.Ссылка,
																												ПараметрГУИД,
																												ПараметрКВД,
																												ПараметрИсточникиСтредств,
																												ПараметрСуммаПоступления,
																												ОписаниеОбъектаОшибки,
																												ПараФайлов);
									//
								КонецЕсли;
							ИначеЕсли ВРЕГ(ВыполняемоеДействие) = ВРЕГ("ПолучитьЗаявку") Тогда
								Если ПараметрСуммаСписания>0 Тогда
									ИсполняющийДокумент = БиблиотекаФункцийОбмена.ОпределитьЗаявку(	Объект.Организация,
									                                                                Объект.ЛицевойСчет.Код,
																									ПараметрНомерДок,
																									ПараметрДатаДок,
																									ПараметрСуммаСписания);

								КонецЕсли;
								Если НЕ ЗначениеЗаполнено(ИсполняющийДокумент) Тогда

									Если ПараметрСуммаСписания>0  Тогда
										//ИсполняющийДокумент =  БиблиотекаФункцийОбмена.СоздатьКассовоеВыбытие(	Структура,
										//																		Объект.Ссылка,
										//																		ПараметрГУИД,
										// 																		ПараметрКВД,
										//																		ПараметрИсточникиСтредств,
										//																		ПараметрСуммаСписания);

										//Прайд
								  		ИсполняющийДокумент =  СоздатьКассовоеВыбытие(							Задание, Структура,
																												Объект.Ссылка,
																												ПараметрГУИД,
										 																		ПараметрКВД,
																												ПараметрИсточникиСтредств,
																												ПараметрСуммаСписания,
																												ОписаниеОбъектаОшибки,
																												ПараФайлов);
										//
									КонецЕсли
								Иначе
									 БиблиотекаФункцийОбмена.ЗаписатьОбразПервичногоДокументаЗаявки(	ИсполняющийДокумент,
										 																	Структура,
																											Объект.Ссылка,
																											Объект.ДатаВыписки,
																											ПараметрГУИД);

									 //Прайд
									 ЗаписьРС = РегистрыСведений.Прайд_СтатусыДокументовВыгрузкаВКазначейство.СоздатьМенеджерЗаписи();
									 ЗаписьРс.Период = ТекущаяДата();
									 ЗаписьРс.ВыгружаемыйДокумент = ИсполняющийДокумент;
									 ЗаписьРс.ДокументЗадание = Объект.Ссылка;
									 ЗаписьРС.Статус = Справочники.Прайд_СтатусыВыгрузкиДокументовВКазначейство.ПодтвержденВыпиской;
									 ЗаписьРС.Записать();
									 //
								КонецЕсли;
							КонецЕсли;

						КонецЦикла;
						Если ЗначениеЗаполнено(ИсполняющийДокумент) Тогда
							Объект.ДокументыДвижений.Добавить().ИсполняющийДокумент = ИсполняющийДокумент;
						КонецЕсли;
					КонецЦикла;
			КонецЕсли;

			ЗаписатьНовыйОбъектИмпорта(Задание, Объект, Неопределено, ПараФайлов.ОсновнойФайл, ОписаниеОбъектаОшибки, ПараФайлов.ФорматОсновногоФайла);
		КонецЦикла;

	КонецЦикла;

	//Если НЕ Отказ Тогда

		Если Задание.Модифицированность() Тогда
			Задание.Записать();
		КонецЕсли;

	//КонецЕсли;

	Обработки.Прайд_ЗаполнениеНастроекКассовыхДокументов.ОбработчикДокументов(Задание.ОбъектыОбмена.Выгрузить());

КонецПроцедуры
